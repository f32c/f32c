diff -drup ../org/gcc-4.6.1/configure ./configure
--- ../org/gcc-4.6.1/configure	2011-03-16 19:27:36.000000000 +0100
+++ ./configure	2011-08-02 21:23:50.000000000 +0200
@@ -2731,6 +2731,10 @@ target_libraries="target-libgcc \
 #
 target_tools="target-examples target-groff target-gperf target-rda"
 
+# Disable building of target libraries and / or tools
+target_libraries=""
+target_tools=""
+
 ################################################################################
 
 ## All tools belong in one of the four categories, and are assigned above
diff -drup ../org/gcc-4.6.1/gcc/config/mips/mips.c ./gcc/config/mips/mips.c
--- ../org/gcc-4.6.1/gcc/config/mips/mips.c	2011-05-29 19:48:14.000000000 +0200
+++ ./gcc/config/mips/mips.c	2011-08-04 00:06:15.000000000 +0200
@@ -706,6 +706,7 @@ static const struct mips_cpu_info mips_c
   /* ST Loongson 2E/2F processors.  */
   { "loongson2e", PROCESSOR_LOONGSON_2E, 3, PTF_AVOID_BRANCHLIKELY },
   { "loongson2f", PROCESSOR_LOONGSON_2F, 3, PTF_AVOID_BRANCHLIKELY },
+  { "f32c", PROCESSOR_F32C, 3, PTF_AVOID_BRANCHLIKELY },
 
   /* MIPS IV processors. */
   { "r8000", PROCESSOR_R8000, 4, 0 },
diff -drup ../org/gcc-4.6.1/gcc/config/mips/mips.h ./gcc/config/mips/mips.h
--- ../org/gcc-4.6.1/gcc/config/mips/mips.h	2011-03-08 21:51:11.000000000 +0100
+++ ./gcc/config/mips/mips.h	2011-08-04 00:50:52.000000000 +0200
@@ -219,6 +219,7 @@ enum mips_code_readable_setting {
 #define TARGET_LOONGSON_2F          (mips_arch == PROCESSOR_LOONGSON_2F)
 #define TARGET_LOONGSON_2EF         (TARGET_LOONGSON_2E || TARGET_LOONGSON_2F)
 #define TARGET_LOONGSON_3A          (mips_arch == PROCESSOR_LOONGSON_3A)
+#define TARGET_F32C                 (mips_arch == PROCESSOR_F32C)
 #define TARGET_MIPS3900             (mips_arch == PROCESSOR_R3900)
 #define TARGET_MIPS4000             (mips_arch == PROCESSOR_R4000)
 #define TARGET_MIPS4120             (mips_arch == PROCESSOR_R4120)
@@ -244,6 +245,7 @@ enum mips_code_readable_setting {
 #define TUNE_LOONGSON_2EF           (mips_tune == PROCESSOR_LOONGSON_2E	\
 				     || mips_tune == PROCESSOR_LOONGSON_2F)
 #define TUNE_LOONGSON_3A            (mips_tune == PROCESSOR_LOONGSON_3A)
+#define TUNE_F32C                   (mips_tune == PROCESSOR_F32C)
 #define TUNE_MIPS3000               (mips_tune == PROCESSOR_R3000)
 #define TUNE_MIPS3900               (mips_tune == PROCESSOR_R3900)
 #define TUNE_MIPS4000               (mips_tune == PROCESSOR_R4000)
@@ -712,7 +714,8 @@ enum mips_code_readable_setting {
   "%{" MIPS_ISA_LEVEL_OPTION_SPEC ":;: \
      %{march=mips1|march=r2000|march=r3000|march=r3900:-mips1} \
      %{march=mips2|march=r6000:-mips2} \
-     %{march=mips3|march=r4*|march=vr4*|march=orion|march=loongson2*:-mips3} \
+     %{march=mips3|march=r4*|march=vr4*|march=orion|march=loongson2* \
+       |march=f32c: -mips3} \
      %{march=mips4|march=r8000|march=vr5*|march=rm7000|march=rm9000 \
        |march=r10000|march=r12000|march=r14000|march=r16000:-mips4} \
      %{march=mips32|march=4kc|march=4km|march=4kp|march=4ksc:-mips32} \
@@ -731,7 +734,7 @@ enum mips_code_readable_setting {
   "%{mhard-float|msoft-float|march=mips*:; \
      march=vr41*|march=m4k|march=4k*|march=24kc|march=24kec \
      |march=34kc|march=74kc|march=1004kc|march=5kc \
-     |march=octeon|march=xlr: -msoft-float;		  \
+     |march=octeon|march=xlr|march=f32c: -msoft-float;		  \
      march=*: -mhard-float}"
 
 /* A spec condition that matches 32-bit options.  It only works if
diff -drup ../org/gcc-4.6.1/gcc/config/mips/mips.md ./gcc/config/mips/mips.md
--- ../org/gcc-4.6.1/gcc/config/mips/mips.md	2011-03-03 22:56:58.000000000 +0100
+++ ./gcc/config/mips/mips.md	2011-08-03 23:38:33.000000000 +0200
@@ -63,6 +63,7 @@
   sb1a
   sr71000
   xlr
+  f32c
 ])
 
 (define_c_enum "unspec" [
@@ -1323,7 +1324,7 @@
   [(set (match_operand:GPR 0 "register_operand")
 	(mult:GPR (match_operand:GPR 1 "register_operand")
 		  (match_operand:GPR 2 "register_operand")))]
-  ""
+  "!TARGET_SWMUL"
 {
   if (TARGET_LOONGSON_2EF || TARGET_LOONGSON_3A)
     emit_insn (gen_mul<mode>3_mul3_loongson (operands[0], operands[1],
@@ -1731,7 +1732,7 @@
   [(set (match_operand:DI 0 "register_operand")
 	(mult:DI (any_extend:DI (match_operand:SI 1 "register_operand"))
 		 (any_extend:DI (match_operand:SI 2 "register_operand"))))]
-  "mips_mulsidi3_gen_fn (<CODE>) != NULL"
+  "!TARGET_SWMUL && mips_mulsidi3_gen_fn (<CODE>) != NULL"
 {
   mulsidi3_gen_fn fn = mips_mulsidi3_gen_fn (<CODE>);
   emit_insn (fn (operands[0], operands[1], operands[2]));
@@ -1906,7 +1907,7 @@
 	  (mult:DI (any_extend:DI (match_operand:SI 1 "register_operand"))
 		   (any_extend:DI (match_operand:SI 2 "register_operand")))
 	  (const_int 32))))]
-  ""
+  "!TARGET_SWMUL"
 {
   if (ISA_HAS_MULHI)
     emit_insn (gen_<su>mulsi3_highpart_mulhi_internal (operands[0],
@@ -1926,7 +1927,7 @@
 		   (any_extend:DI (match_operand:SI 2 "register_operand" "d")))
 	  (const_int 32))))
    (clobber (match_scratch:SI 3 "=l"))]
-  "!ISA_HAS_MULHI"
+  "!TARGET_SWMUL && !ISA_HAS_MULHI"
   { return TARGET_FIX_R4000 ? "mult<u>\t%1,%2\n\tmfhi\t%0" : "#"; }
   "&& reload_completed && !TARGET_FIX_R4000"
   [(const_int 0)]
@@ -2250,7 +2251,9 @@
 		  (match_operand:ANYF 2 "register_operand")))]
   "<divide_condition>"
 {
-  if (const_1_operand (operands[1], <MODE>mode))
+  if (TARGET_SWMUL)
+    FAIL;
+  else if (const_1_operand (operands[1], <MODE>mode))
     if (!(<recip_condition> && flag_unsafe_math_optimizations))
       operands[1] = force_reg (<MODE>mode, operands[1]);
 })
@@ -2312,7 +2315,7 @@
    (set (match_operand:GPR 3 "register_operand" "=d")
 	(mod:GPR (match_dup 1)
 		 (match_dup 2)))]
-  "!TARGET_FIX_VR4120"
+  "!TARGET_SWDIV && !TARGET_FIX_VR4120"
   "#"
   "&& reload_completed"
   [(const_int 0)]
@@ -2344,7 +2347,7 @@
    (set (match_operand:GPR 3 "register_operand" "=d")
 	(umod:GPR (match_dup 1)
 		  (match_dup 2)))]
-  ""
+  "!TARGET_SWDIV"
   "#"
   "reload_completed"
   [(const_int 0)]
@@ -2375,7 +2378,7 @@
 	  [(any_div:GPR (match_operand:GPR 1 "register_operand" "d")
 			(match_operand:GPR 2 "register_operand" "d"))]
 	  UNSPEC_SET_HILO))]
-  ""
+  "!TARGET_SWDIV"
   { return mips_output_division ("<GPR:d>div<u>\t%.,%1,%2", operands); }
   [(set_attr "type" "idiv")
    (set_attr "mode" "<GPR:MODE>")])
diff -drup ../org/gcc-4.6.1/gcc/config/mips/mips.opt ./gcc/config/mips/mips.opt
--- ../org/gcc-4.6.1/gcc/config/mips/mips.opt	2011-02-17 02:59:04.000000000 +0100
+++ ./gcc/config/mips/mips.opt	2011-08-02 21:23:50.000000000 +0200
@@ -76,6 +76,14 @@ mdouble-float
 Target Report RejectNegative InverseMask(SINGLE_FLOAT, DOUBLE_FLOAT)
 Allow hardware floating-point instructions to cover both 32-bit and 64-bit operations
 
+msoft-mul
+Target Report Mask(SWMUL)
+Do not use integer mul instructions
+
+msoft-div
+Target Report Mask(SWDIV)
+Do not use integer div instructions
+
 mdsp
 Target Report Mask(DSP)
 Use MIPS-DSP instructions
