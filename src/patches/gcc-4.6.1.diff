diff -drup ../org/gcc-4.6.1/gcc/config/mips/mips.c gcc/config/mips/mips.c
--- ../org/gcc-4.6.1/gcc/config/mips/mips.c	2011-05-29 19:48:14.000000000 +0200
+++ gcc/config/mips/mips.c	2011-08-20 23:37:08.000000000 +0200
@@ -691,6 +691,7 @@ static const struct mips_cpu_info mips_c
 
   /* MIPS II processors.  */
   { "r6000", PROCESSOR_R6000, 2, 0 },
+  { "f32c", PROCESSOR_F32C, 2, 0 },
 
   /* MIPS III processors.  */
   { "r4000", PROCESSOR_R4000, 3, 0 },
@@ -1183,7 +1184,16 @@ static const struct mips_rtx_cost_data
     COSTS_N_INSNS (72),           /* int_div_di */
 		     1,           /* branch_cost */
 		     4            /* memory_latency */
-  }
+  },
+  { /* F32C */
+    SOFT_FP_COSTS,
+    COSTS_N_INSNS (3),            /* int_mult_si */
+    COSTS_N_INSNS (3),            /* int_mult_di */
+    COSTS_N_INSNS (36),           /* int_div_si */
+    COSTS_N_INSNS (68),           /* int_div_di */
+		     1,           /* branch_cost */
+		     3            /* memory_latency */
+  },
 };
 
 static rtx mips_find_pic_call_symbol (rtx, rtx, bool);
diff -drup ../org/gcc-4.6.1/gcc/config/mips/mips.h gcc/config/mips/mips.h
--- ../org/gcc-4.6.1/gcc/config/mips/mips.h	2011-03-08 21:51:11.000000000 +0100
+++ gcc/config/mips/mips.h	2011-08-21 00:03:30.000000000 +0200
@@ -219,6 +219,7 @@ enum mips_code_readable_setting {
 #define TARGET_LOONGSON_2F          (mips_arch == PROCESSOR_LOONGSON_2F)
 #define TARGET_LOONGSON_2EF         (TARGET_LOONGSON_2E || TARGET_LOONGSON_2F)
 #define TARGET_LOONGSON_3A          (mips_arch == PROCESSOR_LOONGSON_3A)
+#define TARGET_F32C                 (mips_arch == PROCESSOR_F32C)
 #define TARGET_MIPS3900             (mips_arch == PROCESSOR_R3900)
 #define TARGET_MIPS4000             (mips_arch == PROCESSOR_R4000)
 #define TARGET_MIPS4120             (mips_arch == PROCESSOR_R4120)
@@ -244,6 +245,7 @@ enum mips_code_readable_setting {
 #define TUNE_LOONGSON_2EF           (mips_tune == PROCESSOR_LOONGSON_2E	\
 				     || mips_tune == PROCESSOR_LOONGSON_2F)
 #define TUNE_LOONGSON_3A            (mips_tune == PROCESSOR_LOONGSON_3A)
+#define TUNE_F32C                   (mips_tune == PROCESSOR_F32C)
 #define TUNE_MIPS3000               (mips_tune == PROCESSOR_R3000)
 #define TUNE_MIPS3900               (mips_tune == PROCESSOR_R3900)
 #define TUNE_MIPS4000               (mips_tune == PROCESSOR_R4000)
@@ -501,6 +503,12 @@ enum mips_code_readable_setting {
       if (TARGET_PAIRED_SINGLE_FLOAT)					\
 	builtin_define ("__mips_paired_single_float");			\
 									\
+      if (TARGET_SWMUL)							\
+	builtin_define ("__mips_swmul");				\
+									\
+      if (TARGET_SWDIV)							\
+	builtin_define ("__mips_swdiv");				\
+									\
       if (TARGET_BIG_ENDIAN)						\
 	{								\
 	  builtin_define_std ("MIPSEB");				\
@@ -711,11 +719,11 @@ enum mips_code_readable_setting {
 #define MIPS_ISA_LEVEL_SPEC \
   "%{" MIPS_ISA_LEVEL_OPTION_SPEC ":;: \
      %{march=mips1|march=r2000|march=r3000|march=r3900:-mips1} \
-     %{march=mips2|march=r6000:-mips2} \
-     %{march=mips3|march=r4*|march=vr4*|march=orion|march=loongson2*:-mips3} \
+     %{march=mips2|march=r6000|march=f32c:-mips2} \
+     %{march=mips3|march=r4*|march=vr4*|march=orion|march=loongson2:-mips3} \
      %{march=mips4|march=r8000|march=vr5*|march=rm7000|march=rm9000 \
        |march=r10000|march=r12000|march=r14000|march=r16000:-mips4} \
-     %{march=mips32|march=4kc|march=4km|march=4kp|march=4ksc:-mips32} \
+     %{march=mips32|march=4kc|march=4km|march=4kp|march=4ksc: -mips32} \
      %{march=mips32r2|march=m4k|march=4ke*|march=4ksd|march=24k* \
        |march=34k*|march=74k*|march=1004k*: -mips32r2} \
      %{march=mips64|march=5k*|march=20k*|march=sb1*|march=sr71000 \
@@ -731,7 +739,7 @@ enum mips_code_readable_setting {
   "%{mhard-float|msoft-float|march=mips*:; \
      march=vr41*|march=m4k|march=4k*|march=24kc|march=24kec \
      |march=34kc|march=74kc|march=1004kc|march=5kc \
-     |march=octeon|march=xlr: -msoft-float;		  \
+     |march=octeon|march=xlr|march=f32c: -msoft-float; \
      march=*: -mhard-float}"
 
 /* A spec condition that matches 32-bit options.  It only works if
@@ -983,8 +991,8 @@ enum mips_code_readable_setting {
 #define ISA_HAS_TRUNC_W		(!ISA_MIPS1)
 
 /* ISA includes the MIPS32r2 seb and seh instructions.  */
-#define ISA_HAS_SEB_SEH		((ISA_MIPS32R2		\
-				  || ISA_MIPS64R2)	\
+#define ISA_HAS_SEB_SEH		((ISA_MIPS32R2				\
+				  || ISA_MIPS64R2 || TARGET_F32C)	\
 				 && !TARGET_MIPS16)
 
 /* ISA includes the MIPS32/64 rev 2 ext and ins instructions.  */
@@ -1038,6 +1046,7 @@ enum mips_code_readable_setting {
 				 || ISA_MIPS64				\
 				 || ISA_MIPS64R2			\
 				 || TARGET_MIPS5500			\
+				 || TARGET_F32C				\
 				 || TARGET_LOONGSON_2EF)
 
 /* ISA includes synci, jr.hb and jalr.hb.  */
diff -drup ../org/gcc-4.6.1/gcc/config/mips/mips.md gcc/config/mips/mips.md
--- ../org/gcc-4.6.1/gcc/config/mips/mips.md	2011-03-03 22:56:58.000000000 +0100
+++ gcc/config/mips/mips.md	2011-08-14 23:37:13.000000000 +0200
@@ -63,6 +63,7 @@
   sb1a
   sr71000
   xlr
+  f32c
 ])
 
 (define_c_enum "unspec" [
@@ -913,6 +914,7 @@
 (include "sb1.md")
 (include "sr71k.md")
 (include "xlr.md")
+(include "f32c.md")
 (include "generic.md")
 
 ;;
@@ -1323,7 +1325,7 @@
   [(set (match_operand:GPR 0 "register_operand")
 	(mult:GPR (match_operand:GPR 1 "register_operand")
 		  (match_operand:GPR 2 "register_operand")))]
-  ""
+  "!TARGET_SWMUL"
 {
   if (TARGET_LOONGSON_2EF || TARGET_LOONGSON_3A)
     emit_insn (gen_mul<mode>3_mul3_loongson (operands[0], operands[1],
@@ -1731,7 +1733,7 @@
   [(set (match_operand:DI 0 "register_operand")
 	(mult:DI (any_extend:DI (match_operand:SI 1 "register_operand"))
 		 (any_extend:DI (match_operand:SI 2 "register_operand"))))]
-  "mips_mulsidi3_gen_fn (<CODE>) != NULL"
+  "!TARGET_SWMUL && mips_mulsidi3_gen_fn (<CODE>) != NULL"
 {
   mulsidi3_gen_fn fn = mips_mulsidi3_gen_fn (<CODE>);
   emit_insn (fn (operands[0], operands[1], operands[2]));
@@ -1906,7 +1908,7 @@
 	  (mult:DI (any_extend:DI (match_operand:SI 1 "register_operand"))
 		   (any_extend:DI (match_operand:SI 2 "register_operand")))
 	  (const_int 32))))]
-  ""
+  "!TARGET_SWMUL"
 {
   if (ISA_HAS_MULHI)
     emit_insn (gen_<su>mulsi3_highpart_mulhi_internal (operands[0],
@@ -1926,7 +1928,7 @@
 		   (any_extend:DI (match_operand:SI 2 "register_operand" "d")))
 	  (const_int 32))))
    (clobber (match_scratch:SI 3 "=l"))]
-  "!ISA_HAS_MULHI"
+  "!TARGET_SWMUL && !ISA_HAS_MULHI"
   { return TARGET_FIX_R4000 ? "mult<u>\t%1,%2\n\tmfhi\t%0" : "#"; }
   "&& reload_completed && !TARGET_FIX_R4000"
   [(const_int 0)]
@@ -2250,7 +2252,9 @@
 		  (match_operand:ANYF 2 "register_operand")))]
   "<divide_condition>"
 {
-  if (const_1_operand (operands[1], <MODE>mode))
+  if (TARGET_SWDIV || TARGET_F32C)
+    FAIL;
+  else if (const_1_operand (operands[1], <MODE>mode))
     if (!(<recip_condition> && flag_unsafe_math_optimizations))
       operands[1] = force_reg (<MODE>mode, operands[1]);
 })
@@ -2312,7 +2316,7 @@
    (set (match_operand:GPR 3 "register_operand" "=d")
 	(mod:GPR (match_dup 1)
 		 (match_dup 2)))]
-  "!TARGET_FIX_VR4120"
+  "!TARGET_SWDIV && !TARGET_F32C && !TARGET_FIX_VR4120"
   "#"
   "&& reload_completed"
   [(const_int 0)]
@@ -2344,7 +2348,7 @@
    (set (match_operand:GPR 3 "register_operand" "=d")
 	(umod:GPR (match_dup 1)
 		  (match_dup 2)))]
-  ""
+  "!TARGET_SWDIV && !TARGET_F32C"
   "#"
   "reload_completed"
   [(const_int 0)]
@@ -2375,7 +2379,7 @@
 	  [(any_div:GPR (match_operand:GPR 1 "register_operand" "d")
 			(match_operand:GPR 2 "register_operand" "d"))]
 	  UNSPEC_SET_HILO))]
-  ""
+  "!TARGET_SWDIV && !TARGET_F32C"
   { return mips_output_division ("<GPR:d>div<u>\t%.,%1,%2", operands); }
   [(set_attr "type" "idiv")
    (set_attr "mode" "<GPR:MODE>")])
@@ -3657,7 +3661,7 @@
 	(unspec:GPR [(match_operand:BLK 1 "memory_operand" "m")
 		     (match_operand:QI 2 "memory_operand" "m")]
 		    UNSPEC_LOAD_LEFT))]
-  "!TARGET_MIPS16 && mips_mem_fits_mode_p (<MODE>mode, operands[1])"
+  "!TARGET_MIPS16 && !TARGET_F32C && mips_mem_fits_mode_p (<MODE>mode, operands[1])"
   "<load>l\t%0,%2"
   [(set_attr "move_type" "load")
    (set_attr "mode" "<MODE>")])
@@ -3668,7 +3672,7 @@
 		     (match_operand:QI 2 "memory_operand" "m")
 		     (match_operand:GPR 3 "register_operand" "0")]
 		    UNSPEC_LOAD_RIGHT))]
-  "!TARGET_MIPS16 && mips_mem_fits_mode_p (<MODE>mode, operands[1])"
+  "!TARGET_MIPS16 && !TARGET_F32C && mips_mem_fits_mode_p (<MODE>mode, operands[1])"
   "<load>r\t%0,%2"
   [(set_attr "move_type" "load")
    (set_attr "mode" "<MODE>")])
@@ -6301,7 +6305,7 @@
 		 (const_int 0)])
 	 (match_operand:GPR 2 "reg_or_0_operand" "dJ,0")
 	 (match_operand:GPR 3 "reg_or_0_operand" "0,dJ")))]
-  "ISA_HAS_CONDMOVE"
+  "ISA_HAS_CONDMOVE && !TARGET_F32C"
   "@
     mov%T4\t%0,%z2,%1
     mov%t4\t%0,%z3,%1"
diff -drup ../org/gcc-4.6.1/gcc/config/mips/mips.opt gcc/config/mips/mips.opt
--- ../org/gcc-4.6.1/gcc/config/mips/mips.opt	2011-02-17 02:59:04.000000000 +0100
+++ gcc/config/mips/mips.opt	2011-08-07 11:11:03.000000000 +0200
@@ -76,6 +76,14 @@ mdouble-float
 Target Report RejectNegative InverseMask(SINGLE_FLOAT, DOUBLE_FLOAT)
 Allow hardware floating-point instructions to cover both 32-bit and 64-bit operations
 
+msoft-mul
+Target Report Mask(SWMUL)
+Do not use integer mul instructions
+
+msoft-div
+Target Report Mask(SWDIV)
+Do not use integer div instructions
+
 mdsp
 Target Report Mask(DSP)
 Use MIPS-DSP instructions
--- /dev/null	2011-08-21 10:33:34.000000000 +0200
+++ gcc/config/mips/f32c.md	2011-08-13 23:02:06.000000000 +0200
@@ -0,0 +1,105 @@
+;;
+;; f32c pipeline description
+;;
+;; GCC is free software; you can redistribute it and/or modify it
+;; under the terms of the GNU General Public License as published
+;; by the Free Software Foundation; either version 3, or (at your
+;; option) any later version.
+
+;; GCC is distributed in the hope that it will be useful, but WITHOUT
+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+;; License for more details.
+
+;; You should have received a copy of the GNU General Public License
+;; along with GCC; see the file COPYING3.  If not see
+;; <http://www.gnu.org/licenses/>.
+
+
+(define_insn "*mov<GPR:mode>_on_<MOVECC:mode>"
+  [(set (match_operand:GPR 0 "register_operand" "=d,d")
+	(if_then_else:GPR
+	 (match_operator:MOVECC 4 "equality_operator"
+		[(match_operand:MOVECC 1 "register_operand" "<MOVECC:reg>,<MOVECC:reg>")
+		 (const_int 0)])
+	 (match_operand:GPR 2 "reg_or_0_operand" "dJ,0")
+	 (match_operand:GPR 3 "reg_or_0_operand" "0,dJ")))]
+  "ISA_HAS_CONDMOVE && TARGET_F32C"
+  "@
+    mov%T4\t%0,%1,%z2
+    mov%t4\t%0,%1,%z3"
+  [(set_attr "type" "condmove")
+   (set_attr "mode" "<GPR:MODE>")])
+     
+
+(define_automaton "f32c_cpu, f32c_mdu")
+
+;; Integer execution unit.
+(define_cpu_unit "f32c_ixu_arith"       "f32c_cpu")
+(define_cpu_unit "f32c_ixu_mpydiv"      "f32c_mdu")
+
+(define_insn_reservation "f32c_int_load" 3
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "load"))
+  "f32c_ixu_arith")
+
+(define_insn_reservation "f32c_int_store" 1
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "store"))
+  "f32c_ixu_arith")
+
+(define_bypass 3 "f32c_int_load"   "f32c_int_store")
+
+(define_insn_reservation "f32c_int_mult" 1
+  (and (eq_attr "cpu" "f32c")
+       (and (eq_attr "type" "imul,imadd")
+	    (eq_attr "mode" "SI")))
+  "f32c_ixu_arith+(f32c_ixu_mpydiv*2)")
+
+(define_insn_reservation "f32c_int_mfhilo" 1
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "mfhilo"))
+  "f32c_ixu_arith+f32c_ixu_mpydiv")
+
+(define_insn_reservation "f32c_int_shift" 2
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "shift"))
+  "f32c_ixu_arith")
+
+(define_insn_reservation "f32c_condmove" 2
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "condmove"))
+  "f32c_ixu_arith | f32c_ixu_arith")
+
+;; All other integer insns.
+(define_insn_reservation "f32c_int_alu" 1
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "arith,condmove,const,logical,move,nop,signext,slt"))
+  "f32c_ixu_arith")
+
+(define_insn_reservation "f32c_int_branch" 1
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "branch"))
+  "f32c_ixu_arith")
+
+;; JR/JALR.
+(define_insn_reservation "f32c_int_jump" 1
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "jump,call"))
+  "f32c_ixu_arith")
+
+;; Any    -> JR/JALR (without dependency) : 1 clock issue delay
+;; Load   -> JR/JALR (with dependency)    : 3 clock issue delay
+;; Shift  -> JR/JALR (with dependency)    : 3 clock issue delay
+;; Any    -> JR/JALR (with dependency)    : 2 clock issue delay
+(define_bypass 3 "f32c_int_load"   "f32c_int_jump")
+(define_bypass 3 "f32c_int_shift"  "f32c_int_jump")
+(define_bypass 2 "f32c_int_alu"    "f32c_int_jump")
+(define_bypass 2 "f32c_int_mfhilo" "f32c_int_jump")
+
+;; Unknown 
+(define_insn_reservation "f32c_int_unknown" 1
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "unknown,multi"))
+  "f32c_ixu_arith+f32c_ixu_mpydiv")
+
--- ../org/gcc-4.6.1/configure	2011-03-16 19:27:36.000000000 +0100
+++ configure	2011-08-21 09:50:41.000000000 +0200
@@ -2731,6 +2731,10 @@ target_libraries="target-libgcc \
 #
 target_tools="target-examples target-groff target-gperf target-rda"
 
+# Don't build target tools and libraries for f32c yet
+target_libraries=""
+target_tools=""
+
 ################################################################################
 
 ## All tools belong in one of the four categories, and are assigned above
--- ../org/gcc-4.6.1/gcc/doc/g++.1	2011-06-27 12:49:31.000000000 +0200
+++ gcc/doc/g++.1	2011-08-07 11:11:03.000000000 +0200
@@ -13122,6 +13122,7 @@ The processor names are:
 \&\fB34kc\fR, \fB34kf2_1\fR, \fB34kf1_1\fR,
 \&\fB74kc\fR, \fB74kf2_1\fR, \fB74kf1_1\fR, \fB74kf3_2\fR,
 \&\fB1004kc\fR, \fB1004kf2_1\fR, \fB1004kf1_1\fR,
+\&\fBf32c\fR,
 \&\fBloongson2e\fR, \fBloongson2f\fR, \fBloongson3a\fR,
 \&\fBm4k\fR,
 \&\fBocteon\fR,
--- ../org/gcc-4.6.1/gcc/doc/gcc.1	2011-06-27 12:49:31.000000000 +0200
+++ gcc/doc/gcc.1	2011-08-07 11:11:03.000000000 +0200
@@ -13122,6 +13122,7 @@ The processor names are:
 \&\fB34kc\fR, \fB34kf2_1\fR, \fB34kf1_1\fR,
 \&\fB74kc\fR, \fB74kf2_1\fR, \fB74kf1_1\fR, \fB74kf3_2\fR,
 \&\fB1004kc\fR, \fB1004kf2_1\fR, \fB1004kf1_1\fR,
+\&\fBf32c\fR,
 \&\fBloongson2e\fR, \fBloongson2f\fR, \fBloongson3a\fR,
 \&\fBm4k\fR,
 \&\fBocteon\fR,
--- ../org/gcc-4.6.1/gcc/doc/invoke.texi	2011-03-29 16:24:42.000000000 +0200
+++ gcc/doc/invoke.texi	2011-08-07 11:11:03.000000000 +0200
@@ -14197,6 +14197,7 @@ The processor names are:
 @samp{34kc}, @samp{34kf2_1}, @samp{34kf1_1},
 @samp{74kc}, @samp{74kf2_1}, @samp{74kf1_1}, @samp{74kf3_2},
 @samp{1004kc}, @samp{1004kf2_1}, @samp{1004kf1_1},
+@samp{f32c},
 @samp{loongson2e}, @samp{loongson2f}, @samp{loongson3a},
 @samp{m4k},
 @samp{octeon},
