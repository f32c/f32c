diff -drup ../org/gcc-4.9.0-RC-20140411/gcc/config/mips/mips-cpus.def gcc/config/mips/mips-cpus.def
--- ../org/gcc-4.9.0-RC-20140411/gcc/config/mips/mips-cpus.def	2014-03-04 22:39:50.000000000 +0100
+++ gcc/config/mips/mips-cpus.def	2014-04-11 19:00:24.000000000 +0200
@@ -55,6 +55,7 @@ MIPS_CPU ("r3900", PROCESSOR_R3900, 1, 0
 
 /* MIPS II processors.  */
 MIPS_CPU ("r6000", PROCESSOR_R6000, 2, 0)
+MIPS_CPU ("f32c", PROCESSOR_F32C, 2, 0)
 
 /* MIPS III processors.  */
 MIPS_CPU ("r4000", PROCESSOR_R4000, 3, 0)
diff -drup ../org/gcc-4.9.0-RC-20140411/gcc/config/mips/mips.c gcc/config/mips/mips.c
--- ../org/gcc-4.9.0-RC-20140411/gcc/config/mips/mips.c	2014-03-08 10:27:23.000000000 +0100
+++ gcc/config/mips/mips.c	2014-04-11 19:00:24.000000000 +0200
@@ -1173,7 +1173,16 @@ static const struct mips_rtx_cost_data
     COSTS_N_INSNS (68),           /* int_div_di */
 		     1,           /* branch_cost */
 		     4            /* memory_latency */
-  }
+  },
+  { /* F32C */
+    SOFT_FP_COSTS,
+    COSTS_N_INSNS (3),            /* int_mult_si */
+    COSTS_N_INSNS (3),            /* int_mult_di */
+    COSTS_N_INSNS (36),           /* int_div_si */
+    COSTS_N_INSNS (68),           /* int_div_di */
+		     1,           /* branch_cost */
+		     4            /* memory_latency */
+  },
 };
 
 static rtx mips_find_pic_call_symbol (rtx, rtx, bool);
@@ -7300,7 +7309,9 @@ mips_block_move_straight (rtx dest, rtx 
      For instance, lh/lh/sh/sh is usually better than lwl/lwr/swl/swr
      and lw/lw/sw/sw is usually better than ldl/ldr/sdl/sdr.
      Otherwise move word-sized chunks.  */
-  if (MEM_ALIGN (src) == BITS_PER_WORD / 2
+  if (NO_UNALIGNED_LOAD || NO_UNALIGNED_STORE)
+    bits = MIN(MEM_ALIGN(src), MEM_ALIGN(dest));
+  else if (MEM_ALIGN (src) == BITS_PER_WORD / 2
       && MEM_ALIGN (dest) == BITS_PER_WORD / 2)
     bits = BITS_PER_WORD / 2;
   else
diff -drup ../org/gcc-4.9.0-RC-20140411/gcc/config/mips/mips.h gcc/config/mips/mips.h
--- ../org/gcc-4.9.0-RC-20140411/gcc/config/mips/mips.h	2014-03-04 22:39:50.000000000 +0100
+++ gcc/config/mips/mips.h	2014-04-11 19:24:48.000000000 +0200
@@ -216,6 +216,7 @@ struct mips_cpu_info {
 #define TARGET_LOONGSON_2F          (mips_arch == PROCESSOR_LOONGSON_2F)
 #define TARGET_LOONGSON_2EF         (TARGET_LOONGSON_2E || TARGET_LOONGSON_2F)
 #define TARGET_LOONGSON_3A          (mips_arch == PROCESSOR_LOONGSON_3A)
+#define TARGET_F32C                 (mips_arch == PROCESSOR_F32C)
 #define TARGET_MIPS3900             (mips_arch == PROCESSOR_R3900)
 #define TARGET_MIPS4000             (mips_arch == PROCESSOR_R4000)
 #define TARGET_MIPS4120             (mips_arch == PROCESSOR_R4120)
@@ -245,6 +246,7 @@ struct mips_cpu_info {
 #define TUNE_LOONGSON_2EF           (mips_tune == PROCESSOR_LOONGSON_2E	\
 				     || mips_tune == PROCESSOR_LOONGSON_2F)
 #define TUNE_LOONGSON_3A            (mips_tune == PROCESSOR_LOONGSON_3A)
+#define TUNE_F32C                   (mips_tune == PROCESSOR_F32C)
 #define TUNE_MIPS3000               (mips_tune == PROCESSOR_R3000)
 #define TUNE_MIPS3900               (mips_tune == PROCESSOR_R3900)
 #define TUNE_MIPS4000               (mips_tune == PROCESSOR_R4000)
@@ -311,8 +313,10 @@ struct mips_cpu_info {
    directly accessible, while the command-line options select
    TARGET_HARD_FLOAT_ABI and TARGET_SOFT_FLOAT_ABI to reflect the ABI
    in use.  */
-#define TARGET_HARD_FLOAT (TARGET_HARD_FLOAT_ABI && !TARGET_MIPS16)
-#define TARGET_SOFT_FLOAT (TARGET_SOFT_FLOAT_ABI || TARGET_MIPS16)
+#define TARGET_HARD_FLOAT \
+    (TARGET_HARD_FLOAT_ABI && !TARGET_MIPS16 && !TARGET_F32C)
+#define TARGET_SOFT_FLOAT \
+    (TARGET_SOFT_FLOAT_ABI || TARGET_MIPS16 || TARGET_F32C)
 
 /* False if SC acts as a memory barrier with respect to itself,
    otherwise a SYNC will be emitted after SC for atomic operations
@@ -513,6 +517,12 @@ struct mips_cpu_info {
       if (mips_nan == MIPS_IEEE_754_2008)				\
 	builtin_define ("__mips_nan2008");				\
 									\
+      if (TARGET_SWMUL)							\
+	builtin_define ("__mips_swmul");				\
+									\
+      if (TARGET_SWDIV)							\
+	builtin_define ("__mips_swdiv");				\
+									\
       if (TARGET_BIG_ENDIAN)						\
 	{								\
 	  builtin_define_std ("MIPSEB");				\
@@ -693,7 +703,7 @@ struct mips_cpu_info {
 #define MIPS_ISA_LEVEL_SPEC \
   "%{" MIPS_ISA_LEVEL_OPTION_SPEC ":;: \
      %{march=mips1|march=r2000|march=r3000|march=r3900:-mips1} \
-     %{march=mips2|march=r6000:-mips2} \
+     %{march=mips2|march=r6000|march=f32c:-mips2} \
      %{march=mips3|march=r4*|march=vr4*|march=orion|march=loongson2*:-mips3} \
      %{march=mips4|march=r8000|march=vr5*|march=rm7000|march=rm9000 \
        |march=r10000|march=r12000|march=r14000|march=r16000:-mips4} \
@@ -713,7 +723,7 @@ struct mips_cpu_info {
   "%{mhard-float|msoft-float|mno-float|march=mips*:; \
      march=vr41*|march=m4k|march=4k*|march=24kc|march=24kec \
      |march=34kc|march=34kn|march=74kc|march=1004kc|march=5kc \
-     |march=m14k*|march=octeon|march=xlr: -msoft-float;		  \
+     |march=m14k*|march=octeon|march=xlr|march=f32c: -msoft-float; \
      march=*: -mhard-float}"
 
 /* A spec condition that matches 32-bit options.  It only works if
@@ -808,6 +818,11 @@ struct mips_cpu_info {
    been generated up to this point.  */
 #define ISA_HAS_BRANCHLIKELY	(!ISA_MIPS1)
 
+/* F32C hacks */
+#define	NO_DIV (TARGET_SWDIV || TARGET_F32C)
+#define	NO_UNALIGNED_LOAD (TARGET_NO_UNALIGNED_LOAD || TARGET_F32C)
+#define	NO_UNALIGNED_STORE (TARGET_NO_UNALIGNED_STORE || TARGET_F32C)
+
 /* ISA has a three-operand multiplication instruction (usually spelt "mul").  */
 #define ISA_HAS_MUL3		((TARGET_MIPS3900                       \
 				  || TARGET_MIPS5400			\
@@ -895,6 +910,7 @@ struct mips_cpu_info {
 
 /* ISA has conditional trap instructions.  */
 #define ISA_HAS_COND_TRAP	(!ISA_MIPS1				\
+				 && !TARGET_F32C			\
 				 && !TARGET_MIPS16)
 
 /* ISA has integer multiply-accumulate instructions, madd and msub.  */
@@ -1013,8 +1029,8 @@ struct mips_cpu_info {
 #define ISA_HAS_TRUNC_W		(!ISA_MIPS1)
 
 /* ISA includes the MIPS32r2 seb and seh instructions.  */
-#define ISA_HAS_SEB_SEH		((ISA_MIPS32R2		\
-				  || ISA_MIPS64R2)	\
+#define ISA_HAS_SEB_SEH		((ISA_MIPS32R2				\
+				  || ISA_MIPS64R2 || TARGET_F32C)	\
 				 && !TARGET_MIPS16)
 
 /* ISA includes the MIPS32/64 rev 2 ext and ins instructions.  */
@@ -1084,6 +1100,7 @@ struct mips_cpu_info {
 				 || ISA_MIPS64R2			\
 				 || TARGET_MIPS5500			\
 				 || TARGET_MIPS5900			\
+				 || TARGET_F32C				\
 				 || TARGET_LOONGSON_2EF)
 
 /* ISA includes synci, jr.hb and jalr.hb.  */
diff -drup ../org/gcc-4.9.0-RC-20140411/gcc/config/mips/mips.md gcc/config/mips/mips.md
--- ../org/gcc-4.9.0-RC-20140411/gcc/config/mips/mips.md	2014-02-02 17:05:09.000000000 +0100
+++ gcc/config/mips/mips.md	2014-04-11 23:05:05.000000000 +0200
@@ -65,6 +65,7 @@
   sr71000
   xlr
   xlp
+  f32c
 ])
 
 (define_c_enum "unspec" [
@@ -1075,6 +1076,7 @@
 (include "sr71k.md")
 (include "xlr.md")
 (include "xlp.md")
+(include "f32c.md")
 (include "generic.md")
 
 ;;
@@ -1091,6 +1093,8 @@
 {
   if (ISA_HAS_COND_TRAP)
     return "teq\t$0,$0";
+  else if (TARGET_F32C)
+    return "jr\t$0";
   else if (TARGET_MIPS16)
     return "break 0";
   else
@@ -1482,7 +1486,7 @@
   [(set (match_operand:GPR 0 "register_operand")
 	(mult:GPR (match_operand:GPR 1 "register_operand")
 		  (match_operand:GPR 2 "register_operand")))]
-  "ISA_HAS_<D>MULT"
+  "ISA_HAS_<D>MULT && !TARGET_SWMUL"
 {
   rtx lo;
 
@@ -1524,7 +1528,7 @@
 	(mult:GPR (match_operand:GPR 1 "register_operand" "d,d")
 		  (match_operand:GPR 2 "register_operand" "d,d")))
    (clobber (match_scratch:GPR 3 "=l,X"))]
-  "ISA_HAS_<D>MUL3"
+  "ISA_HAS_<D>MUL3 & !TARGET_SWMUL"
 {
   if (which_alternative == 1)
     return "<d>mult\t%1,%2";
@@ -1562,7 +1566,7 @@
   [(set (match_operand:GPR 0 "muldiv_target_operand" "=l")
 	(mult:GPR (match_operand:GPR 1 "register_operand" "d")
 		  (match_operand:GPR 2 "register_operand" "d")))]
-  "ISA_HAS_<D>MULT && !TARGET_FIX_R4000"
+  "ISA_HAS_<D>MULT && !TARGET_FIX_R4000 & !TARGET_SWMUL"
   "<d>mult\t%1,%2"
   [(set_attr "type" "imul")
    (set_attr "mode" "<MODE>")])
@@ -1572,7 +1576,7 @@
 	(mult:GPR (match_operand:GPR 1 "register_operand" "d")
 		  (match_operand:GPR 2 "register_operand" "d")))
    (clobber (match_scratch:GPR 3 "=l"))]
-  "ISA_HAS_<D>MULT && TARGET_FIX_R4000"
+  "ISA_HAS_<D>MULT && TARGET_FIX_R4000 & !TARGET_SWMUL"
   "<d>mult\t%1,%2\;mflo\t%0"
   [(set_attr "type" "imul")
    (set_attr "mode" "<MODE>")
@@ -1906,7 +1910,7 @@
   [(set (match_operand:DI 0 "register_operand")
 	(mult:DI (any_extend:DI (match_operand:SI 1 "register_operand"))
 		 (any_extend:DI (match_operand:SI 2 "register_operand"))))]
-  "mips_mulsidi3_gen_fn (<CODE>) != NULL"
+  "!TARGET_SWMUL && mips_mulsidi3_gen_fn (<CODE>) != NULL"
 {
   mulsidi3_gen_fn fn = mips_mulsidi3_gen_fn (<CODE>);
   emit_insn (fn (operands[0], operands[1], operands[2]));
@@ -1934,7 +1938,7 @@
   [(set (match_operand:DI 0 "muldiv_target_operand" "=ka")
 	(mult:DI (any_extend:DI (match_operand:SI 1 "register_operand" "d"))
 		 (any_extend:DI (match_operand:SI 2 "register_operand" "d"))))]
-  "!TARGET_64BIT && (!TARGET_FIX_R4000 || ISA_HAS_DSP)"
+  "!TARGET_SWMUL && !TARGET_64BIT && (!TARGET_FIX_R4000 || ISA_HAS_DSP)"
 {
   if (ISA_HAS_DSP_MULT)
     return "mult<u>\t%q0,%1,%2";
@@ -1949,7 +1953,7 @@
 	(mult:DI (any_extend:DI (match_operand:SI 1 "register_operand" "d"))
 		 (any_extend:DI (match_operand:SI 2 "register_operand" "d"))))
    (clobber (match_scratch:DI 3 "=x"))]
-  "!TARGET_64BIT && TARGET_FIX_R4000 && !ISA_HAS_DSP"
+  "!TARGET_SWMUL && !TARGET_64BIT && TARGET_FIX_R4000 && !ISA_HAS_DSP"
   "mult<u>\t%1,%2\;mflo\t%L0\;mfhi\t%M0"
   [(set_attr "type" "imul")
    (set_attr "mode" "SI")
@@ -2028,7 +2032,7 @@
 	     (any_extend:DI (match_operand:SI 1 "register_operand" "d"))
 	     (any_extend:DI (match_operand:SI 2 "register_operand" "d")))]
 	  UNSPEC_SET_HILO))]
-  "TARGET_64BIT && !TARGET_FIX_R4000"
+  "!TARGET_SWMUL && TARGET_64BIT && !TARGET_FIX_R4000"
   "mult<u>\t%1,%2"
   [(set_attr "type" "imul")
    (set_attr "mode" "SI")])
@@ -2051,7 +2055,7 @@
 	 (mult:DI
 	  (any_extend:DI (match_operand:SI 1 "register_operand" "d"))
 	  (any_extend:DI (match_operand:SI 2 "register_operand" "d")))))]
-  "!TARGET_64BIT && ISA_HAS_MULS"
+  "!NO_DIV && !TARGET_64BIT && ISA_HAS_MULS"
   "muls<u>\t$0,%1,%2"
   [(set_attr "type" "imul")
    (set_attr "mode" "SI")])
@@ -2092,7 +2096,7 @@
 	  (mult:DI (any_extend:DI (match_operand:SI 1 "register_operand"))
 		   (any_extend:DI (match_operand:SI 2 "register_operand")))
 	  (const_int 32))))]
-  ""
+  "!TARGET_SWMUL"
 {
   if (ISA_HAS_MULHI)
     emit_insn (gen_<su>mulsi3_highpart_mulhi_internal (operands[0],
@@ -2115,7 +2119,7 @@
 		   (any_extend:DI (match_operand:SI 2 "register_operand" "d")))
 	  (const_int 32))))
    (clobber (match_scratch:SI 3 "=l"))]
-  "!ISA_HAS_MULHI && !TARGET_MIPS16"
+  "!TARGET_SWMUL && !ISA_HAS_MULHI && !TARGET_MIPS16"
   { return TARGET_FIX_R4000 ? "mult<u>\t%1,%2\n\tmfhi\t%0" : "#"; }
   "&& reload_completed && !TARGET_FIX_R4000"
   [(const_int 0)]
@@ -2509,7 +2513,9 @@
 		  (match_operand:ANYF 2 "register_operand")))]
   "<divide_condition>"
 {
-  if (const_1_operand (operands[1], <MODE>mode))
+  if (NO_DIV)
+    FAIL;
+  else if (const_1_operand (operands[1], <MODE>mode))
     if (!(ISA_HAS_FP_RECIP_RSQRT (<MODE>mode)
 	  && flag_unsafe_math_optimizations))
       operands[1] = force_reg (<MODE>mode, operands[1]);
@@ -2573,7 +2579,7 @@
       (set (match_operand:GPR 3 "register_operand")
 	   (mod:GPR (match_dup 1)
 		    (match_dup 2)))])]
-  "ISA_HAS_<D>DIV && !TARGET_FIX_VR4120"
+  "!NO_DIV && ISA_HAS_<D>DIV && !TARGET_FIX_VR4120"
 {
   if (TARGET_MIPS16)
     {
@@ -2591,7 +2597,7 @@
    (set (match_operand:GPR 3 "register_operand" "=d")
 	(mod:GPR (match_dup 1)
 		 (match_dup 2)))]
-  "ISA_HAS_<D>DIV && !TARGET_FIX_VR4120 && !TARGET_MIPS16"
+  "!NO_DIV && ISA_HAS_<D>DIV && !TARGET_FIX_VR4120 && !TARGET_MIPS16"
   "#"
   "&& reload_completed"
   [(const_int 0)]
@@ -2638,7 +2644,7 @@
       (set (match_operand:GPR 3 "register_operand")
 	   (umod:GPR (match_dup 1)
 		     (match_dup 2)))])]
-  "ISA_HAS_<D>DIV && !TARGET_FIX_VR4120"
+  "!NO_DIV && ISA_HAS_<D>DIV && !TARGET_FIX_VR4120"
 {
   if (TARGET_MIPS16)
     {
@@ -2656,7 +2662,7 @@
    (set (match_operand:GPR 3 "register_operand" "=d")
 	(umod:GPR (match_dup 1)
 		  (match_dup 2)))]
-  "ISA_HAS_<D>DIV && !TARGET_MIPS16"
+  "!NO_DIV && ISA_HAS_<D>DIV && !TARGET_MIPS16"
   "#"
   "reload_completed"
   [(const_int 0)]
@@ -2694,7 +2700,7 @@
   [(set (match_operand:GPR 0 "register_operand")
 	(any_mod:GPR (match_operand:GPR 1 "register_operand")
 		     (match_operand:GPR 2 "register_operand")))]
-  ""
+  "!NO_DIV"
 {
   rtx hilo;
 
@@ -2721,7 +2727,7 @@
 	  [(any_div:GPR (match_operand:GPR 1 "register_operand" "d")
 			(match_operand:GPR 2 "register_operand" "d"))]
 	  UNSPEC_SET_HILO))]
-  "ISA_HAS_<GPR:D>DIV"
+  "!NO_DIV && ISA_HAS_<GPR:D>DIV"
   { return mips_output_division ("<GPR:d>div<u>\t%.,%1,%2", operands); }
   [(set_attr "type" "idiv")
    (set_attr "mode" "<GPR:MODE>")])
@@ -3870,7 +3876,7 @@
 	(sign_extract:GPR (match_operand:BLK 1 "memory_operand")
 			  (match_operand 2 "const_int_operand")
 			  (match_operand 3 "const_int_operand")))]
-  "!TARGET_MIPS16"
+  "!TARGET_MIPS16 && !NO_UNALIGNED_LOAD"
 {
   if (mips_expand_ext_as_unaligned_load (operands[0], operands[1],
 					 INTVAL (operands[2]),
@@ -3907,7 +3913,7 @@
 	(zero_extract:GPR (match_operand:BLK 1 "memory_operand")
 			  (match_operand 2 "const_int_operand")
 			  (match_operand 3 "const_int_operand")))]
-  "!TARGET_MIPS16"
+  "!TARGET_MIPS16 && !NO_UNALIGNED_LOAD"
 {
   if (mips_expand_ext_as_unaligned_load (operands[0], operands[1],
 					 INTVAL (operands[2]),
@@ -3958,7 +3964,7 @@
 			  (match_operand 1 "const_int_operand")
 			  (match_operand 2 "const_int_operand"))
 	(match_operand:GPR 3 "reg_or_0_operand"))]
-  "!TARGET_MIPS16"
+  "!TARGET_MIPS16 && !NO_UNALIGNED_STORE"
 {
   if (mips_expand_ins_as_unaligned_store (operands[0], operands[3],
 					  INTVAL (operands[1]),
@@ -4030,7 +4036,7 @@
 	(unspec:GPR [(match_operand:BLK 1 "memory_operand" "m")
 		     (match_operand:QI 2 "memory_operand" "ZC")]
 		    UNSPEC_LOAD_LEFT))]
-  "!TARGET_MIPS16 && mips_mem_fits_mode_p (<MODE>mode, operands[1])"
+  "!TARGET_MIPS16 && !NO_UNALIGNED_LOAD && mips_mem_fits_mode_p (<MODE>mode, operands[1])"
   "<load>l\t%0,%2"
   [(set_attr "move_type" "load")
    (set_attr "mode" "<MODE>")])
@@ -4041,7 +4047,7 @@
 		     (match_operand:QI 2 "memory_operand" "ZC")
 		     (match_operand:GPR 3 "register_operand" "0")]
 		    UNSPEC_LOAD_RIGHT))]
-  "!TARGET_MIPS16 && mips_mem_fits_mode_p (<MODE>mode, operands[1])"
+  "!TARGET_MIPS16 && !NO_UNALIGNED_LOAD && mips_mem_fits_mode_p (<MODE>mode, operands[1])"
   "<load>r\t%0,%2"
   [(set_attr "move_type" "load")
    (set_attr "mode" "<MODE>")])
@@ -4051,7 +4057,7 @@
 	(unspec:BLK [(match_operand:GPR 1 "reg_or_0_operand" "dJ")
 		     (match_operand:QI 2 "memory_operand" "ZC")]
 		    UNSPEC_STORE_LEFT))]
-  "!TARGET_MIPS16 && mips_mem_fits_mode_p (<MODE>mode, operands[0])"
+  "!TARGET_MIPS16 && !NO_UNALIGNED_STORE && mips_mem_fits_mode_p (<MODE>mode, operands[0])"
   "<store>l\t%z1,%2"
   [(set_attr "move_type" "store")
    (set_attr "mode" "<MODE>")])
@@ -4062,7 +4068,7 @@
 		     (match_operand:QI 2 "memory_operand" "ZC")
 		     (match_dup 0)]
 		    UNSPEC_STORE_RIGHT))]
-  "!TARGET_MIPS16 && mips_mem_fits_mode_p (<MODE>mode, operands[0])"
+  "!TARGET_MIPS16 && !NO_UNALIGNED_STORE && mips_mem_fits_mode_p (<MODE>mode, operands[0])"
   "<store>r\t%z1,%2"
   [(set_attr "move_type" "store")
    (set_attr "mode" "<MODE>")])
diff -drup ../org/gcc-4.9.0-RC-20140411/gcc/config/mips/mips.opt gcc/config/mips/mips.opt
--- ../org/gcc-4.9.0-RC-20140411/gcc/config/mips/mips.opt	2014-02-21 14:30:47.000000000 +0100
+++ gcc/config/mips/mips.opt	2014-04-11 19:00:24.000000000 +0200
@@ -115,6 +115,22 @@ mdouble-float
 Target Report RejectNegative InverseMask(SINGLE_FLOAT, DOUBLE_FLOAT)
 Allow hardware floating-point instructions to cover both 32-bit and 64-bit operations
 
+mno-mul
+Target Report RejectNegative Var(TARGET_SWMUL)
+Do not use integer mul instructions
+
+mno-div
+Target Report RejectNegative Var(TARGET_SWDIV)
+Do not use integer div instructions
+
+mno-unaligned-load
+Target Report RejectNegative Var(TARGET_NO_UNALIGNED_LOAD)
+Do not emit unaligned load instructions
+
+mno-unaligned-store
+Target Report RejectNegative Var(TARGET_NO_UNALIGNED_STORE)
+Do not emit unaligned store instructions
+
 mdsp
 Target Report Var(TARGET_DSP)
 Use MIPS-DSP instructions
--- /dev/null	2014-04-11 23:11:00.000000000 +0200
+++ gcc/config/mips/f32c.md	2014-04-11 19:00:24.000000000 +0200
@@ -0,0 +1,96 @@
+;;
+;; f32c pipeline description
+;;
+
+
+(define_automaton "f32c_cpu, f32c_mdu")
+
+;; Integer execution unit.
+(define_cpu_unit "f32c_ixu_arith"       "f32c_cpu")
+(define_cpu_unit "f32c_ixu_mpydiv"      "f32c_mdu")
+
+(define_insn_reservation "f32c_int_load" 3
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "load"))
+  "f32c_ixu_arith")
+
+(define_insn_reservation "f32c_int_store" 1
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "store"))
+  "f32c_ixu_arith")
+
+(define_bypass 3 "f32c_int_load"   "f32c_int_store")
+
+(define_insn_reservation "f32c_int_mult" 1
+  (and (eq_attr "cpu" "f32c")
+       (and (eq_attr "type" "imul,imadd")
+	    (eq_attr "mode" "SI")))
+  "f32c_ixu_arith+(f32c_ixu_mpydiv*2)")
+
+(define_insn_reservation "f32c_int_mfhilo" 1
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "mfhi,mflo"))
+  "f32c_ixu_arith+f32c_ixu_mpydiv")
+
+(define_insn_reservation "f32c_int_shift" 2
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "shift"))
+  "f32c_ixu_arith")
+
+(define_insn_reservation "f32c_condmove" 2
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "condmove"))
+  "f32c_ixu_arith")
+
+;; All other integer insns.
+(define_insn_reservation "f32c_int_alu" 1
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "arith,const,logical,move,nop,signext,slt"))
+  "f32c_ixu_arith")
+
+(define_insn_reservation "f32c_int_branch" 1
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "branch"))
+  "f32c_ixu_arith")
+
+;; JR/JALR.
+(define_insn_reservation "f32c_int_jump" 1
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "jump,call"))
+  "f32c_ixu_arith")
+
+;; Any    -> JR/JALR (without dependency) : 1 clock issue delay
+;; Load   -> JR/JALR (with dependency)    : 3 clock issue delay
+;; Shift  -> JR/JALR (with dependency)    : 3 clock issue delay
+;; Any    -> JR/JALR (with dependency)    : 2 clock issue delay
+(define_bypass 3 "f32c_int_load"   "f32c_int_jump")
+(define_bypass 3 "f32c_int_shift"  "f32c_int_jump")
+(define_bypass 2 "f32c_int_alu"    "f32c_int_jump")
+(define_bypass 2 "f32c_int_mfhilo" "f32c_int_jump")
+
+;; Unknown 
+(define_insn_reservation "f32c_int_unknown" 1
+  (and (eq_attr "cpu" "f32c")
+       (eq_attr "type" "unknown,multi"))
+  "f32c_ixu_arith+f32c_ixu_mpydiv")
+
+
+;; Substitute sll %0,%1,1 with addu %0,%1,%1
+(define_insn "*ashl<mode>3"
+  [(set (match_operand:GPR 0 "register_operand" "=d")
+        (ashift:GPR (match_operand:GPR 1 "register_operand" "d")
+                       (match_operand:SI 2 "arith_operand" "dI")))]
+  "TARGET_F32C"
+{
+  if (CONST_INT_P (operands[2]))
+    operands[2] = GEN_INT (INTVAL (operands[2])
+                           & (GET_MODE_BITSIZE (<MODE>mode) - 1));
+                               
+  if (CONST_INT_P (operands[2]) && INTVAL (operands[2]) == 1)
+    return "addu\t%0,%1,%1";
+  else
+    return "sll\t%0,%1,%2";
+}
+  [(set_attr "type" "shift")
+   (set_attr "mode" "<MODE>")])
+
--- ../org/gcc-4.9.0-RC-20140411/configure	2014-03-26 10:19:44.000000000 +0100
+++ configure	2014-04-11 19:00:24.000000000 +0200
@@ -2795,7 +2795,10 @@ target_libraries="target-libgcc \
 # note: any program that *uses* libraries that are in the "target_libraries"
 # list belongs in this list.
 #
-target_tools="target-rda"
+
+# Don't build target tools and libraries for f32c yet
+target_tools=""
+target_libraries=""
 
 ################################################################################
 
--- ../org/gcc-4.9.0-RC-20140411/gcc/doc/invoke.texi	2014-04-11 14:47:20.000000000 +0200
+++ gcc/doc/invoke.texi	2014-04-11 19:00:24.000000000 +0200
@@ -17040,6 +17040,7 @@ The processor names are:
 @samp{34kc}, @samp{34kf2_1}, @samp{34kf1_1}, @samp{34kn},
 @samp{74kc}, @samp{74kf2_1}, @samp{74kf1_1}, @samp{74kf3_2},
 @samp{1004kc}, @samp{1004kf2_1}, @samp{1004kf1_1},
+@samp{f32c},
 @samp{loongson2e}, @samp{loongson2f}, @samp{loongson3a},
 @samp{m4k},
 @samp{m14k}, @samp{m14kc}, @samp{m14ke}, @samp{m14kec},
